
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  name: string
  email: string | null
  password: string | null
  createdAt: Date
  updateAt: Date
  bio: string | null
  avatar: string | null
}

/**
 * Model Author
 */

export type Author = {
  id: number
  name: string
}

/**
 * Model Saying
 */

export type Saying = {
  id: number
  createdAt: Date
  updateAt: Date
  authorId: number
  userId: number
  text: string
}

/**
 * Model Tag
 */

export type Tag = {
  id: number
  name: string
}

/**
 * Model Like
 */

export type Like = {
  id: number
  createdAt: Date
  updateAt: Date
  sayingId: number
  userId: number
}

/**
 * Model Comment
 */

export type Comment = {
  id: number
  createdAt: Date
  updateAt: Date
  text: string
  sayingId: number
  userId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **Author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.AuthorDelegate<GlobalReject>;

  /**
   * `prisma.saying`: Exposes CRUD operations for the **Saying** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sayings
    * const sayings = await prisma.saying.findMany()
    * ```
    */
  get saying(): Prisma.SayingDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Author: 'Author',
    Saying: 'Saying',
    Tag: 'Tag',
    Like: 'Like',
    Comment: 'Comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updateAt: Date | null
    bio: string | null
    avatar: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updateAt: Date | null
    bio: string | null
    avatar: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    password: number | null
    createdAt: number | null
    updateAt: number | null
    bio: number | null
    avatar: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updateAt?: true
    bio?: true
    avatar?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updateAt?: true
    bio?: true
    avatar?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updateAt?: true
    bio?: true
    avatar?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updateAt?: boolean
    comments?: boolean | CommentFindManyArgs
    bio?: boolean
    avatar?: boolean
    sayings?: boolean | SayingFindManyArgs
    likes?: boolean | LikeFindManyArgs
    tags?: boolean | TagFindManyArgs
  }

  export type UserInclude = {
    comments?: boolean | CommentFindManyArgs
    sayings?: boolean | SayingFindManyArgs
    likes?: boolean | LikeFindManyArgs
    tags?: boolean | TagFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'sayings'
        ? Array < SayingGetPayload<S['include'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends 'tags'
        ? Array < TagGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'sayings'
        ? Array < SayingGetPayload<S['select'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends 'tags'
        ? Array < TagGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    sayings<T extends SayingFindManyArgs = {}>(args?: Subset<T, SayingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Saying>>, PrismaPromise<Array<SayingGetPayload<T>>>>;

    likes<T extends LikeFindManyArgs = {}>(args?: Subset<T, LikeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Like>>, PrismaPromise<Array<LikeGetPayload<T>>>>;

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Author
   */


  export type AggregateAuthor = {
    count: AuthorCountAggregateOutputType | null
    avg: AuthorAvgAggregateOutputType | null
    sum: AuthorSumAggregateOutputType | null
    min: AuthorMinAggregateOutputType | null
    max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorAvgAggregateOutputType = {
    id: number
  }

  export type AuthorSumAggregateOutputType = {
    id: number
  }

  export type AuthorMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type AuthorMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type AuthorCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type AuthorAvgAggregateInputType = {
    id?: true
  }

  export type AuthorSumAggregateInputType = {
    id?: true
  }

  export type AuthorMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type AuthorMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type AuthorCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AuthorAggregateArgs = {
    /**
     * Filter which Author to aggregate.
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
    **/
    orderBy?: Enumerable<AuthorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authors
    **/
    count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: AuthorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: AuthorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
    [P in keyof T & keyof AggregateAuthor]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }



  export type AuthorSelect = {
    id?: boolean
    name?: boolean
    sayings?: boolean | SayingFindManyArgs
  }

  export type AuthorInclude = {
    sayings?: boolean | SayingFindManyArgs
  }

  export type AuthorGetPayload<
    S extends boolean | null | undefined | AuthorArgs,
    U = keyof S
      > = S extends true
        ? Author
    : S extends undefined
    ? never
    : S extends AuthorArgs | AuthorFindManyArgs
    ?'include' extends U
    ? Author  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sayings'
        ? Array < SayingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Author ?Author [P]
  : 
          P extends 'sayings'
        ? Array < SayingGetPayload<S['select'][P]>>  : never
  } 
    : Author
  : Author


  type AuthorCountArgs = Merge<
    Omit<AuthorFindManyArgs, 'select' | 'include'> & {
      select?: AuthorCountAggregateInputType | true
    }
  >

  export interface AuthorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Author that matches the filter.
     * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuthorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Author'> extends True ? CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>> : CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuthorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Author'> extends True ? CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>> : CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuthorFindManyArgs>(
      args?: SelectSubset<T, AuthorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Author>>, PrismaPromise<Array<AuthorGetPayload<T>>>>

    /**
     * Create a Author.
     * @param {AuthorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
    **/
    create<T extends AuthorCreateArgs>(
      args: SelectSubset<T, AuthorCreateArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Create many Authors.
     *     @param {AuthorCreateManyArgs} args - Arguments to create many Authors.
     *     @example
     *     // Create many Authors
     *     const author = await prisma.author.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuthorCreateManyArgs>(
      args?: SelectSubset<T, AuthorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Author.
     * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
    **/
    delete<T extends AuthorDeleteArgs>(
      args: SelectSubset<T, AuthorDeleteArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Update one Author.
     * @param {AuthorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorUpdateArgs>(
      args: SelectSubset<T, AuthorUpdateArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Delete zero or more Authors.
     * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorDeleteManyArgs>(
      args?: SelectSubset<T, AuthorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorUpdateManyArgs>(
      args: SelectSubset<T, AuthorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorUpsertArgs>(
      args: SelectSubset<T, AuthorUpsertArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends AuthorCountArgs>(
      args?: Subset<T, AuthorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): PrismaPromise<GetAuthorAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuthorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sayings<T extends SayingFindManyArgs = {}>(args?: Subset<T, SayingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Saying>>, PrismaPromise<Array<SayingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Author findUnique
   */
  export type AuthorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * Throw an Error if a Author can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Author to fetch.
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author findFirst
   */
  export type AuthorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * Throw an Error if a Author can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Author to fetch.
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
    **/
    orderBy?: Enumerable<AuthorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
    **/
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }


  /**
   * Author findMany
   */
  export type AuthorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * Filter, which Authors to fetch.
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
    **/
    orderBy?: Enumerable<AuthorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authors.
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
    **/
    skip?: number
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }


  /**
   * Author create
   */
  export type AuthorCreateArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to create a Author.
    **/
    data: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
  }


  /**
   * Author createMany
   */
  export type AuthorCreateManyArgs = {
    data: Enumerable<AuthorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Author update
   */
  export type AuthorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to update a Author.
    **/
    data: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
    /**
     * Choose, which Author to update.
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author updateMany
   */
  export type AuthorUpdateManyArgs = {
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyInput>
    where?: AuthorWhereInput
  }


  /**
   * Author upsert
   */
  export type AuthorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * The filter to search for the Author to update in case it exists.
    **/
    where: AuthorWhereUniqueInput
    /**
     * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
    **/
    create: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
    /**
     * In case the Author was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
  }


  /**
   * Author delete
   */
  export type AuthorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
    /**
     * Filter which Author to delete.
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author deleteMany
   */
  export type AuthorDeleteManyArgs = {
    where?: AuthorWhereInput
  }


  /**
   * Author without action
   */
  export type AuthorArgs = {
    /**
     * Select specific fields to fetch from the Author
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AuthorInclude | null
  }



  /**
   * Model Saying
   */


  export type AggregateSaying = {
    count: SayingCountAggregateOutputType | null
    avg: SayingAvgAggregateOutputType | null
    sum: SayingSumAggregateOutputType | null
    min: SayingMinAggregateOutputType | null
    max: SayingMaxAggregateOutputType | null
  }

  export type SayingAvgAggregateOutputType = {
    id: number
    authorId: number
    userId: number
  }

  export type SayingSumAggregateOutputType = {
    id: number
    authorId: number
    userId: number
  }

  export type SayingMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    authorId: number
    userId: number
    text: string | null
  }

  export type SayingMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    authorId: number
    userId: number
    text: string | null
  }

  export type SayingCountAggregateOutputType = {
    id: number
    createdAt: number | null
    updateAt: number | null
    authorId: number
    userId: number
    text: number | null
    _all: number
  }


  export type SayingAvgAggregateInputType = {
    id?: true
    authorId?: true
    userId?: true
  }

  export type SayingSumAggregateInputType = {
    id?: true
    authorId?: true
    userId?: true
  }

  export type SayingMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    authorId?: true
    userId?: true
    text?: true
  }

  export type SayingMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    authorId?: true
    userId?: true
    text?: true
  }

  export type SayingCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    authorId?: true
    userId?: true
    text?: true
    _all?: true
  }

  export type SayingAggregateArgs = {
    /**
     * Filter which Saying to aggregate.
    **/
    where?: SayingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sayings to fetch.
    **/
    orderBy?: Enumerable<SayingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SayingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sayings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sayings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sayings
    **/
    count?: true | SayingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SayingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SayingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SayingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SayingMaxAggregateInputType
  }

  export type GetSayingAggregateType<T extends SayingAggregateArgs> = {
    [P in keyof T & keyof AggregateSaying]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaying[P]>
      : GetScalarType<T[P], AggregateSaying[P]>
  }



  export type SayingSelect = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | UserArgs
    author?: boolean | AuthorArgs
    comments?: boolean | CommentFindManyArgs
    authorId?: boolean
    userId?: boolean
    text?: boolean
    tags?: boolean | TagFindManyArgs
    likes?: boolean | LikeFindManyArgs
  }

  export type SayingInclude = {
    user?: boolean | UserArgs
    author?: boolean | AuthorArgs
    comments?: boolean | CommentFindManyArgs
    tags?: boolean | TagFindManyArgs
    likes?: boolean | LikeFindManyArgs
  }

  export type SayingGetPayload<
    S extends boolean | null | undefined | SayingArgs,
    U = keyof S
      > = S extends true
        ? Saying
    : S extends undefined
    ? never
    : S extends SayingArgs | SayingFindManyArgs
    ?'include' extends U
    ? Saying  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'author'
        ? AuthorGetPayload<S['include'][P]> :
        P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'tags'
        ? Array < TagGetPayload<S['include'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Saying ?Saying [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'author'
        ? AuthorGetPayload<S['select'][P]> :
        P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'tags'
        ? Array < TagGetPayload<S['select'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  : never
  } 
    : Saying
  : Saying


  type SayingCountArgs = Merge<
    Omit<SayingFindManyArgs, 'select' | 'include'> & {
      select?: SayingCountAggregateInputType | true
    }
  >

  export interface SayingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Saying that matches the filter.
     * @param {SayingFindUniqueArgs} args - Arguments to find a Saying
     * @example
     * // Get one Saying
     * const saying = await prisma.saying.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SayingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SayingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Saying'> extends True ? CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>> : CheckSelect<T, Prisma__SayingClient<Saying | null >, Prisma__SayingClient<SayingGetPayload<T> | null >>

    /**
     * Find the first Saying that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SayingFindFirstArgs} args - Arguments to find a Saying
     * @example
     * // Get one Saying
     * const saying = await prisma.saying.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SayingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SayingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Saying'> extends True ? CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>> : CheckSelect<T, Prisma__SayingClient<Saying | null >, Prisma__SayingClient<SayingGetPayload<T> | null >>

    /**
     * Find zero or more Sayings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SayingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sayings
     * const sayings = await prisma.saying.findMany()
     * 
     * // Get first 10 Sayings
     * const sayings = await prisma.saying.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sayingWithIdOnly = await prisma.saying.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SayingFindManyArgs>(
      args?: SelectSubset<T, SayingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Saying>>, PrismaPromise<Array<SayingGetPayload<T>>>>

    /**
     * Create a Saying.
     * @param {SayingCreateArgs} args - Arguments to create a Saying.
     * @example
     * // Create one Saying
     * const Saying = await prisma.saying.create({
     *   data: {
     *     // ... data to create a Saying
     *   }
     * })
     * 
    **/
    create<T extends SayingCreateArgs>(
      args: SelectSubset<T, SayingCreateArgs>
    ): CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>>

    /**
     * Create many Sayings.
     *     @param {SayingCreateManyArgs} args - Arguments to create many Sayings.
     *     @example
     *     // Create many Sayings
     *     const saying = await prisma.saying.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SayingCreateManyArgs>(
      args?: SelectSubset<T, SayingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Saying.
     * @param {SayingDeleteArgs} args - Arguments to delete one Saying.
     * @example
     * // Delete one Saying
     * const Saying = await prisma.saying.delete({
     *   where: {
     *     // ... filter to delete one Saying
     *   }
     * })
     * 
    **/
    delete<T extends SayingDeleteArgs>(
      args: SelectSubset<T, SayingDeleteArgs>
    ): CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>>

    /**
     * Update one Saying.
     * @param {SayingUpdateArgs} args - Arguments to update one Saying.
     * @example
     * // Update one Saying
     * const saying = await prisma.saying.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SayingUpdateArgs>(
      args: SelectSubset<T, SayingUpdateArgs>
    ): CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>>

    /**
     * Delete zero or more Sayings.
     * @param {SayingDeleteManyArgs} args - Arguments to filter Sayings to delete.
     * @example
     * // Delete a few Sayings
     * const { count } = await prisma.saying.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SayingDeleteManyArgs>(
      args?: SelectSubset<T, SayingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sayings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SayingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sayings
     * const saying = await prisma.saying.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SayingUpdateManyArgs>(
      args: SelectSubset<T, SayingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Saying.
     * @param {SayingUpsertArgs} args - Arguments to update or create a Saying.
     * @example
     * // Update or create a Saying
     * const saying = await prisma.saying.upsert({
     *   create: {
     *     // ... data to create a Saying
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Saying we want to update
     *   }
     * })
    **/
    upsert<T extends SayingUpsertArgs>(
      args: SelectSubset<T, SayingUpsertArgs>
    ): CheckSelect<T, Prisma__SayingClient<Saying>, Prisma__SayingClient<SayingGetPayload<T>>>

    /**
     * Count the number of Sayings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SayingCountArgs} args - Arguments to filter Sayings to count.
     * @example
     * // Count the number of Sayings
     * const count = await prisma.saying.count({
     *   where: {
     *     // ... the filter for the Sayings we want to count
     *   }
     * })
    **/
    count<T extends SayingCountArgs>(
      args?: Subset<T, SayingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SayingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Saying.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SayingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SayingAggregateArgs>(args: Subset<T, SayingAggregateArgs>): PrismaPromise<GetSayingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Saying.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SayingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    author<T extends AuthorArgs = {}>(args?: Subset<T, AuthorArgs>): CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>;

    comments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    likes<T extends LikeFindManyArgs = {}>(args?: Subset<T, LikeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Like>>, PrismaPromise<Array<LikeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Saying findUnique
   */
  export type SayingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * Throw an Error if a Saying can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Saying to fetch.
    **/
    where: SayingWhereUniqueInput
  }


  /**
   * Saying findFirst
   */
  export type SayingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * Throw an Error if a Saying can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Saying to fetch.
    **/
    where?: SayingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sayings to fetch.
    **/
    orderBy?: Enumerable<SayingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sayings.
    **/
    cursor?: SayingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sayings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sayings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sayings.
    **/
    distinct?: Enumerable<SayingScalarFieldEnum>
  }


  /**
   * Saying findMany
   */
  export type SayingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * Filter, which Sayings to fetch.
    **/
    where?: SayingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sayings to fetch.
    **/
    orderBy?: Enumerable<SayingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sayings.
    **/
    cursor?: SayingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sayings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sayings.
    **/
    skip?: number
    distinct?: Enumerable<SayingScalarFieldEnum>
  }


  /**
   * Saying create
   */
  export type SayingCreateArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * The data needed to create a Saying.
    **/
    data: XOR<SayingCreateInput, SayingUncheckedCreateInput>
  }


  /**
   * Saying createMany
   */
  export type SayingCreateManyArgs = {
    data: Enumerable<SayingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Saying update
   */
  export type SayingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * The data needed to update a Saying.
    **/
    data: XOR<SayingUpdateInput, SayingUncheckedUpdateInput>
    /**
     * Choose, which Saying to update.
    **/
    where: SayingWhereUniqueInput
  }


  /**
   * Saying updateMany
   */
  export type SayingUpdateManyArgs = {
    data: XOR<SayingUpdateManyMutationInput, SayingUncheckedUpdateManyInput>
    where?: SayingWhereInput
  }


  /**
   * Saying upsert
   */
  export type SayingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * The filter to search for the Saying to update in case it exists.
    **/
    where: SayingWhereUniqueInput
    /**
     * In case the Saying found by the `where` argument doesn't exist, create a new Saying with this data.
    **/
    create: XOR<SayingCreateInput, SayingUncheckedCreateInput>
    /**
     * In case the Saying was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<SayingUpdateInput, SayingUncheckedUpdateInput>
  }


  /**
   * Saying delete
   */
  export type SayingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
    /**
     * Filter which Saying to delete.
    **/
    where: SayingWhereUniqueInput
  }


  /**
   * Saying deleteMany
   */
  export type SayingDeleteManyArgs = {
    where?: SayingWhereInput
  }


  /**
   * Saying without action
   */
  export type SayingArgs = {
    /**
     * Select specific fields to fetch from the Saying
    **/
    select?: SayingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SayingInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    count: TagCountAggregateOutputType | null
    avg: TagAvgAggregateOutputType | null
    sum: TagSumAggregateOutputType | null
    min: TagMinAggregateOutputType | null
    max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number
  }

  export type TagSumAggregateOutputType = {
    id: number
  }

  export type TagMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
    [P in keyof T & keyof AggregateTag]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }



  export type TagSelect = {
    id?: boolean
    name?: boolean
    sayings?: boolean | SayingFindManyArgs
    users?: boolean | UserFindManyArgs
  }

  export type TagInclude = {
    sayings?: boolean | SayingFindManyArgs
    users?: boolean | UserFindManyArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sayings'
        ? Array < SayingGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Tag ?Tag [P]
  : 
          P extends 'sayings'
        ? Array < SayingGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sayings<T extends SayingFindManyArgs = {}>(args?: Subset<T, SayingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Saying>>, PrismaPromise<Array<SayingGetPayload<T>>>>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
  }



  /**
   * Model Like
   */


  export type AggregateLike = {
    count: LikeCountAggregateOutputType | null
    avg: LikeAvgAggregateOutputType | null
    sum: LikeSumAggregateOutputType | null
    min: LikeMinAggregateOutputType | null
    max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number
    sayingId: number
    userId: number
  }

  export type LikeSumAggregateOutputType = {
    id: number
    sayingId: number
    userId: number
  }

  export type LikeMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    sayingId: number
    userId: number
  }

  export type LikeMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    sayingId: number
    userId: number
  }

  export type LikeCountAggregateOutputType = {
    id: number
    createdAt: number | null
    updateAt: number | null
    sayingId: number
    userId: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    sayingId?: true
    userId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    sayingId?: true
    userId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    sayingId?: true
    userId?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    sayingId?: true
    userId?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    sayingId?: true
    userId?: true
    _all?: true
  }

  export type LikeAggregateArgs = {
    /**
     * Filter which Like to aggregate.
    **/
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
    [P in keyof T & keyof AggregateLike]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }



  export type LikeSelect = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    saying?: boolean | SayingArgs
    user?: boolean | UserArgs
    sayingId?: boolean
    userId?: boolean
  }

  export type LikeInclude = {
    saying?: boolean | SayingArgs
    user?: boolean | UserArgs
  }

  export type LikeGetPayload<
    S extends boolean | null | undefined | LikeArgs,
    U = keyof S
      > = S extends true
        ? Like
    : S extends undefined
    ? never
    : S extends LikeArgs | LikeFindManyArgs
    ?'include' extends U
    ? Like  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'saying'
        ? SayingGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Like ?Like [P]
  : 
          P extends 'saying'
        ? SayingGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Like
  : Like


  type LikeCountArgs = Merge<
    Omit<LikeFindManyArgs, 'select' | 'include'> & {
      select?: LikeCountAggregateInputType | true
    }
  >

  export interface LikeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LikeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Like'> extends True ? CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>> : CheckSelect<T, Prisma__LikeClient<Like | null >, Prisma__LikeClient<LikeGetPayload<T> | null >>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LikeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Like'> extends True ? CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>> : CheckSelect<T, Prisma__LikeClient<Like | null >, Prisma__LikeClient<LikeGetPayload<T> | null >>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeFindManyArgs>(
      args?: SelectSubset<T, LikeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Like>>, PrismaPromise<Array<LikeGetPayload<T>>>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends LikeCreateArgs>(
      args: SelectSubset<T, LikeCreateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Create many Likes.
     *     @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     *     @example
     *     // Create many Likes
     *     const like = await prisma.like.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeCreateManyArgs>(
      args?: SelectSubset<T, LikeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends LikeDeleteArgs>(
      args: SelectSubset<T, LikeDeleteArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeUpdateArgs>(
      args: SelectSubset<T, LikeUpdateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeDeleteManyArgs>(
      args?: SelectSubset<T, LikeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeUpdateManyArgs>(
      args: SelectSubset<T, LikeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends LikeUpsertArgs>(
      args: SelectSubset<T, LikeUpsertArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): PrismaPromise<GetLikeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    saying<T extends SayingArgs = {}>(args?: Subset<T, SayingArgs>): CheckSelect<T, Prisma__SayingClient<Saying | null >, Prisma__SayingClient<SayingGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Throw an Error if a Like can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Like to fetch.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Throw an Error if a Like can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Like to fetch.
    **/
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
    **/
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like findMany
   */
  export type LikeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Likes to fetch.
    **/
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like create
   */
  export type LikeCreateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to create a Like.
    **/
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }


  /**
   * Like createMany
   */
  export type LikeCreateManyArgs = {
    data: Enumerable<LikeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Like update
   */
  export type LikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to update a Like.
    **/
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs = {
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    where?: LikeWhereInput
  }


  /**
   * Like upsert
   */
  export type LikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The filter to search for the Like to update in case it exists.
    **/
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
    **/
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }


  /**
   * Like delete
   */
  export type LikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter which Like to delete.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs = {
    where?: LikeWhereInput
  }


  /**
   * Like without action
   */
  export type LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    count: CommentCountAggregateOutputType | null
    avg: CommentAvgAggregateOutputType | null
    sum: CommentSumAggregateOutputType | null
    min: CommentMinAggregateOutputType | null
    max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number
    sayingId: number
    userId: number
  }

  export type CommentSumAggregateOutputType = {
    id: number
    sayingId: number
    userId: number
  }

  export type CommentMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    text: string | null
    sayingId: number
    userId: number
  }

  export type CommentMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    updateAt: Date | null
    text: string | null
    sayingId: number
    userId: number
  }

  export type CommentCountAggregateOutputType = {
    id: number
    createdAt: number | null
    updateAt: number | null
    text: number | null
    sayingId: number
    userId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    sayingId?: true
    userId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    sayingId?: true
    userId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    text?: true
    sayingId?: true
    userId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    text?: true
    sayingId?: true
    userId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updateAt?: true
    text?: true
    sayingId?: true
    userId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
    [P in keyof T & keyof AggregateComment]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }



  export type CommentSelect = {
    id?: boolean
    createdAt?: boolean
    updateAt?: boolean
    text?: boolean
    saying?: boolean | SayingArgs
    user?: boolean | UserArgs
    sayingId?: boolean
    userId?: boolean
  }

  export type CommentInclude = {
    saying?: boolean | SayingArgs
    user?: boolean | UserArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | CommentFindManyArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'saying'
        ? SayingGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Comment ?Comment [P]
  : 
          P extends 'saying'
        ? SayingGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Comment
  : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    saying<T extends SayingArgs = {}>(args?: Subset<T, SayingArgs>): CheckSelect<T, Prisma__SayingClient<Saying | null >, Prisma__SayingClient<SayingGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    bio: 'bio',
    avatar: 'avatar'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AuthorScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const SayingScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    authorId: 'authorId',
    userId: 'userId',
    text: 'text'
  };

  export type SayingScalarFieldEnum = (typeof SayingScalarFieldEnum)[keyof typeof SayingScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    sayingId: 'sayingId',
    userId: 'userId'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    text: 'text',
    sayingId: 'sayingId',
    userId: 'userId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    comments?: CommentListRelationFilter
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    sayings?: SayingListRelationFilter
    likes?: LikeListRelationFilter
    tags?: TagListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    name?: string
    email?: string
  }

  export type AuthorWhereInput = {
    AND?: Enumerable<AuthorWhereInput>
    OR?: Enumerable<AuthorWhereInput>
    NOT?: Enumerable<AuthorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    sayings?: SayingListRelationFilter
  }

  export type AuthorOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AuthorWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type SayingWhereInput = {
    AND?: Enumerable<SayingWhereInput>
    OR?: Enumerable<SayingWhereInput>
    NOT?: Enumerable<SayingWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    author?: XOR<AuthorRelationFilter, AuthorWhereInput>
    comments?: CommentListRelationFilter
    authorId?: IntFilter | number
    userId?: IntFilter | number
    text?: StringFilter | string
    tags?: TagListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type SayingOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    user?: UserOrderByInput
    author?: AuthorOrderByInput
    authorId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
  }

  export type SayingWhereUniqueInput = {
    id?: number
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    sayings?: SayingListRelationFilter
    users?: UserListRelationFilter
  }

  export type TagOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type LikeWhereInput = {
    AND?: Enumerable<LikeWhereInput>
    OR?: Enumerable<LikeWhereInput>
    NOT?: Enumerable<LikeWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    saying?: XOR<SayingRelationFilter, SayingWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    sayingId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type LikeOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    saying?: SayingOrderByInput
    user?: UserOrderByInput
    sayingId?: SortOrder
    userId?: SortOrder
  }

  export type LikeWhereUniqueInput = {
    id?: number
    sayingId_userId?: LikeSayingIdUserIdCompoundUniqueInput
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    text?: StringFilter | string
    saying?: XOR<SayingRelationFilter, SayingWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    sayingId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type CommentOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    text?: SortOrder
    saying?: SayingOrderByInput
    user?: UserOrderByInput
    sayingId?: SortOrder
    userId?: SortOrder
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type UserCreateInput = {
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentCreateNestedManyWithoutUserInput
    sayings?: SayingCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    sayings?: SayingUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutUserInput
    sayings?: SayingUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    tags?: TagUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    sayings?: SayingUncheckedUpdateManyWithoutUserInput
    likes?: LikeUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorCreateInput = {
    name: string
    sayings?: SayingCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUncheckedCreateInput = {
    id?: number
    name: string
    sayings?: SayingUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sayings?: SayingUpdateManyWithoutAuthorInput
  }

  export type AuthorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sayings?: SayingUncheckedUpdateManyWithoutAuthorInput
  }

  export type AuthorCreateManyInput = {
    id?: number
    name: string
  }

  export type AuthorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SayingCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutSayingsInput
    author: AuthorCreateNestedOneWithoutSayingsInput
    comments?: CommentCreateNestedManyWithoutSayingInput
    tags?: TagCreateNestedManyWithoutSayingsInput
    likes?: LikeCreateNestedManyWithoutSayingInput
  }

  export type SayingUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    userId: number
    text: string
    comments?: CommentUncheckedCreateNestedManyWithoutSayingInput
    likes?: LikeUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSayingsInput
    author?: AuthorUpdateOneRequiredWithoutSayingsInput
    comments?: CommentUpdateManyWithoutSayingInput
    tags?: TagUpdateManyWithoutSayingsInput
    likes?: LikeUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutSayingInput
    likes?: LikeUncheckedUpdateManyWithoutSayingInput
  }

  export type SayingCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    userId: number
    text: string
  }

  export type SayingUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type SayingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    name: string
    sayings?: SayingCreateNestedManyWithoutTagsInput
    users?: UserCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sayings?: SayingUpdateManyWithoutTagsInput
    users?: UserUpdateManyWithoutTagsInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateManyInput = {
    id?: number
    name: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LikeCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    saying: SayingCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    sayingId: number
    userId: number
  }

  export type LikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saying?: SayingUpdateOneRequiredWithoutLikesInput
    user?: UserUpdateOneRequiredWithoutLikesInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sayingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    sayingId: number
    userId: number
  }

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sayingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    saying: SayingCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    sayingId: number
    userId: number
  }

  export type CommentUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    saying?: SayingUpdateOneRequiredWithoutCommentsInput
    user?: UserUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    sayingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    sayingId: number
    userId: number
  }

  export type CommentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    sayingId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type SayingListRelationFilter = {
    every?: SayingWhereInput
    some?: SayingWhereInput
    none?: SayingWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AuthorRelationFilter = {
    is?: AuthorWhereInput
    isNot?: AuthorWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SayingRelationFilter = {
    is?: SayingWhereInput
    isNot?: SayingWhereInput
  }

  export type LikeSayingIdUserIdCompoundUniqueInput = {
    sayingId: number
    userId: number
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type SayingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SayingCreateWithoutUserInput>, Enumerable<SayingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutUserInput>
    createMany?: SayingCreateManyUserInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LikeCreateWithoutUserInput>, Enumerable<LikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutUserInput>
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type TagCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<TagCreateWithoutUsersInput>, Enumerable<TagUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type SayingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SayingCreateWithoutUserInput>, Enumerable<SayingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutUserInput>
    createMany?: SayingCreateManyUserInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LikeCreateWithoutUserInput>, Enumerable<LikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutUserInput>
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CommentUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type SayingUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SayingCreateWithoutUserInput>, Enumerable<SayingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SayingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SayingCreateManyUserInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
    set?: Enumerable<SayingWhereUniqueInput>
    disconnect?: Enumerable<SayingWhereUniqueInput>
    delete?: Enumerable<SayingWhereUniqueInput>
    update?: Enumerable<SayingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SayingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SayingScalarWhereInput>
  }

  export type LikeUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LikeCreateWithoutUserInput>, Enumerable<LikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type TagUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<TagCreateWithoutUsersInput>, Enumerable<TagUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<TagWhereUniqueInput>
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type SayingUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SayingCreateWithoutUserInput>, Enumerable<SayingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SayingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SayingCreateManyUserInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
    set?: Enumerable<SayingWhereUniqueInput>
    disconnect?: Enumerable<SayingWhereUniqueInput>
    delete?: Enumerable<SayingWhereUniqueInput>
    update?: Enumerable<SayingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SayingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SayingScalarWhereInput>
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LikeCreateWithoutUserInput>, Enumerable<LikeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type SayingCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SayingCreateWithoutAuthorInput>, Enumerable<SayingUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutAuthorInput>
    createMany?: SayingCreateManyAuthorInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
  }

  export type SayingUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SayingCreateWithoutAuthorInput>, Enumerable<SayingUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutAuthorInput>
    createMany?: SayingCreateManyAuthorInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
  }

  export type SayingUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SayingCreateWithoutAuthorInput>, Enumerable<SayingUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SayingUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SayingCreateManyAuthorInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
    set?: Enumerable<SayingWhereUniqueInput>
    disconnect?: Enumerable<SayingWhereUniqueInput>
    delete?: Enumerable<SayingWhereUniqueInput>
    update?: Enumerable<SayingUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SayingUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SayingScalarWhereInput>
  }

  export type SayingUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SayingCreateWithoutAuthorInput>, Enumerable<SayingUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SayingUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SayingCreateManyAuthorInputEnvelope
    connect?: Enumerable<SayingWhereUniqueInput>
    set?: Enumerable<SayingWhereUniqueInput>
    disconnect?: Enumerable<SayingWhereUniqueInput>
    delete?: Enumerable<SayingWhereUniqueInput>
    update?: Enumerable<SayingUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SayingUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SayingScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSayingsInput = {
    create?: XOR<UserCreateWithoutSayingsInput, UserUncheckedCreateWithoutSayingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSayingsInput
    connect?: UserWhereUniqueInput
  }

  export type AuthorCreateNestedOneWithoutSayingsInput = {
    create?: XOR<AuthorCreateWithoutSayingsInput, AuthorUncheckedCreateWithoutSayingsInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutSayingsInput
    connect?: AuthorWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutSayingInput = {
    create?: XOR<Enumerable<CommentCreateWithoutSayingInput>, Enumerable<CommentUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutSayingInput>
    createMany?: CommentCreateManySayingInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type TagCreateNestedManyWithoutSayingsInput = {
    create?: XOR<Enumerable<TagCreateWithoutSayingsInput>, Enumerable<TagUncheckedCreateWithoutSayingsInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutSayingsInput>
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type LikeCreateNestedManyWithoutSayingInput = {
    create?: XOR<Enumerable<LikeCreateWithoutSayingInput>, Enumerable<LikeUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutSayingInput>
    createMany?: LikeCreateManySayingInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutSayingInput = {
    create?: XOR<Enumerable<CommentCreateWithoutSayingInput>, Enumerable<CommentUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutSayingInput>
    createMany?: CommentCreateManySayingInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type LikeUncheckedCreateNestedManyWithoutSayingInput = {
    create?: XOR<Enumerable<LikeCreateWithoutSayingInput>, Enumerable<LikeUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutSayingInput>
    createMany?: LikeCreateManySayingInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutSayingsInput = {
    create?: XOR<UserCreateWithoutSayingsInput, UserUncheckedCreateWithoutSayingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSayingsInput
    upsert?: UserUpsertWithoutSayingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSayingsInput, UserUncheckedUpdateWithoutSayingsInput>
  }

  export type AuthorUpdateOneRequiredWithoutSayingsInput = {
    create?: XOR<AuthorCreateWithoutSayingsInput, AuthorUncheckedCreateWithoutSayingsInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutSayingsInput
    upsert?: AuthorUpsertWithoutSayingsInput
    connect?: AuthorWhereUniqueInput
    update?: XOR<AuthorUpdateWithoutSayingsInput, AuthorUncheckedUpdateWithoutSayingsInput>
  }

  export type CommentUpdateManyWithoutSayingInput = {
    create?: XOR<Enumerable<CommentCreateWithoutSayingInput>, Enumerable<CommentUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutSayingInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutSayingInput>
    createMany?: CommentCreateManySayingInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutSayingInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutSayingInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type TagUpdateManyWithoutSayingsInput = {
    create?: XOR<Enumerable<TagCreateWithoutSayingsInput>, Enumerable<TagUncheckedCreateWithoutSayingsInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutSayingsInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutSayingsInput>
    connect?: Enumerable<TagWhereUniqueInput>
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutSayingsInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutSayingsInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type LikeUpdateManyWithoutSayingInput = {
    create?: XOR<Enumerable<LikeCreateWithoutSayingInput>, Enumerable<LikeUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutSayingInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutSayingInput>
    createMany?: LikeCreateManySayingInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutSayingInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutSayingInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutSayingInput = {
    create?: XOR<Enumerable<CommentCreateWithoutSayingInput>, Enumerable<CommentUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutSayingInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutSayingInput>
    createMany?: CommentCreateManySayingInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutSayingInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutSayingInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type LikeUncheckedUpdateManyWithoutSayingInput = {
    create?: XOR<Enumerable<LikeCreateWithoutSayingInput>, Enumerable<LikeUncheckedCreateWithoutSayingInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutSayingInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutSayingInput>
    createMany?: LikeCreateManySayingInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutSayingInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutSayingInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type SayingCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<SayingCreateWithoutTagsInput>, Enumerable<SayingUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutTagsInput>
    connect?: Enumerable<SayingWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTagsInput>, Enumerable<UserUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTagsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type SayingUpdateManyWithoutTagsInput = {
    create?: XOR<Enumerable<SayingCreateWithoutTagsInput>, Enumerable<SayingUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<SayingCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<SayingUpsertWithWhereUniqueWithoutTagsInput>
    connect?: Enumerable<SayingWhereUniqueInput>
    set?: Enumerable<SayingWhereUniqueInput>
    disconnect?: Enumerable<SayingWhereUniqueInput>
    delete?: Enumerable<SayingWhereUniqueInput>
    update?: Enumerable<SayingUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<SayingUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<SayingScalarWhereInput>
  }

  export type UserUpdateManyWithoutTagsInput = {
    create?: XOR<Enumerable<UserCreateWithoutTagsInput>, Enumerable<UserUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTagsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type SayingCreateNestedOneWithoutLikesInput = {
    create?: XOR<SayingCreateWithoutLikesInput, SayingUncheckedCreateWithoutLikesInput>
    connectOrCreate?: SayingCreateOrConnectWithoutLikesInput
    connect?: SayingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type SayingUpdateOneRequiredWithoutLikesInput = {
    create?: XOR<SayingCreateWithoutLikesInput, SayingUncheckedCreateWithoutLikesInput>
    connectOrCreate?: SayingCreateOrConnectWithoutLikesInput
    upsert?: SayingUpsertWithoutLikesInput
    connect?: SayingWhereUniqueInput
    update?: XOR<SayingUpdateWithoutLikesInput, SayingUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type SayingCreateNestedOneWithoutCommentsInput = {
    create?: XOR<SayingCreateWithoutCommentsInput, SayingUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SayingCreateOrConnectWithoutCommentsInput
    connect?: SayingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type SayingUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<SayingCreateWithoutCommentsInput, SayingUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SayingCreateOrConnectWithoutCommentsInput
    upsert?: SayingUpsertWithoutCommentsInput
    connect?: SayingWhereUniqueInput
    update?: XOR<SayingUpdateWithoutCommentsInput, SayingUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CommentCreateWithoutUserInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    saying: SayingCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    sayingId: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: Enumerable<CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SayingCreateWithoutUserInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    author: AuthorCreateNestedOneWithoutSayingsInput
    comments?: CommentCreateNestedManyWithoutSayingInput
    tags?: TagCreateNestedManyWithoutSayingsInput
    likes?: LikeCreateNestedManyWithoutSayingInput
  }

  export type SayingUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    text: string
    comments?: CommentUncheckedCreateNestedManyWithoutSayingInput
    likes?: LikeUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingCreateOrConnectWithoutUserInput = {
    where: SayingWhereUniqueInput
    create: XOR<SayingCreateWithoutUserInput, SayingUncheckedCreateWithoutUserInput>
  }

  export type SayingCreateManyUserInputEnvelope = {
    data: Enumerable<SayingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    saying: SayingCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    sayingId: number
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: Enumerable<LikeCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutUsersInput = {
    name: string
    sayings?: SayingCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type TagCreateOrConnectWithoutUsersInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    text?: StringFilter | string
    sayingId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type SayingUpsertWithWhereUniqueWithoutUserInput = {
    where: SayingWhereUniqueInput
    update: XOR<SayingUpdateWithoutUserInput, SayingUncheckedUpdateWithoutUserInput>
    create: XOR<SayingCreateWithoutUserInput, SayingUncheckedCreateWithoutUserInput>
  }

  export type SayingUpdateWithWhereUniqueWithoutUserInput = {
    where: SayingWhereUniqueInput
    data: XOR<SayingUpdateWithoutUserInput, SayingUncheckedUpdateWithoutUserInput>
  }

  export type SayingUpdateManyWithWhereWithoutUserInput = {
    where: SayingScalarWhereInput
    data: XOR<SayingUpdateManyMutationInput, SayingUncheckedUpdateManyWithoutSayingsInput>
  }

  export type SayingScalarWhereInput = {
    AND?: Enumerable<SayingScalarWhereInput>
    OR?: Enumerable<SayingScalarWhereInput>
    NOT?: Enumerable<SayingScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    authorId?: IntFilter | number
    userId?: IntFilter | number
    text?: StringFilter | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutLikesInput>
  }

  export type LikeScalarWhereInput = {
    AND?: Enumerable<LikeScalarWhereInput>
    OR?: Enumerable<LikeScalarWhereInput>
    NOT?: Enumerable<LikeScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    sayingId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type TagUpsertWithWhereUniqueWithoutUsersInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>
  }

  export type TagUpdateWithWhereUniqueWithoutUsersInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>
  }

  export type TagUpdateManyWithWhereWithoutUsersInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type TagScalarWhereInput = {
    AND?: Enumerable<TagScalarWhereInput>
    OR?: Enumerable<TagScalarWhereInput>
    NOT?: Enumerable<TagScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type SayingCreateWithoutAuthorInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutSayingsInput
    comments?: CommentCreateNestedManyWithoutSayingInput
    tags?: TagCreateNestedManyWithoutSayingsInput
    likes?: LikeCreateNestedManyWithoutSayingInput
  }

  export type SayingUncheckedCreateWithoutAuthorInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId: number
    text: string
    comments?: CommentUncheckedCreateNestedManyWithoutSayingInput
    likes?: LikeUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingCreateOrConnectWithoutAuthorInput = {
    where: SayingWhereUniqueInput
    create: XOR<SayingCreateWithoutAuthorInput, SayingUncheckedCreateWithoutAuthorInput>
  }

  export type SayingCreateManyAuthorInputEnvelope = {
    data: Enumerable<SayingCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type SayingUpsertWithWhereUniqueWithoutAuthorInput = {
    where: SayingWhereUniqueInput
    update: XOR<SayingUpdateWithoutAuthorInput, SayingUncheckedUpdateWithoutAuthorInput>
    create: XOR<SayingCreateWithoutAuthorInput, SayingUncheckedCreateWithoutAuthorInput>
  }

  export type SayingUpdateWithWhereUniqueWithoutAuthorInput = {
    where: SayingWhereUniqueInput
    data: XOR<SayingUpdateWithoutAuthorInput, SayingUncheckedUpdateWithoutAuthorInput>
  }

  export type SayingUpdateManyWithWhereWithoutAuthorInput = {
    where: SayingScalarWhereInput
    data: XOR<SayingUpdateManyMutationInput, SayingUncheckedUpdateManyWithoutSayingsInput>
  }

  export type UserCreateWithoutSayingsInput = {
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSayingsInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSayingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSayingsInput, UserUncheckedCreateWithoutSayingsInput>
  }

  export type AuthorCreateWithoutSayingsInput = {
    name: string
  }

  export type AuthorUncheckedCreateWithoutSayingsInput = {
    id?: number
    name: string
  }

  export type AuthorCreateOrConnectWithoutSayingsInput = {
    where: AuthorWhereUniqueInput
    create: XOR<AuthorCreateWithoutSayingsInput, AuthorUncheckedCreateWithoutSayingsInput>
  }

  export type CommentCreateWithoutSayingInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutSayingInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    userId: number
  }

  export type CommentCreateOrConnectWithoutSayingInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutSayingInput, CommentUncheckedCreateWithoutSayingInput>
  }

  export type CommentCreateManySayingInputEnvelope = {
    data: Enumerable<CommentCreateManySayingInput>
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutSayingsInput = {
    name: string
    users?: UserCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutSayingsInput = {
    id?: number
    name: string
  }

  export type TagCreateOrConnectWithoutSayingsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutSayingsInput, TagUncheckedCreateWithoutSayingsInput>
  }

  export type LikeCreateWithoutSayingInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutSayingInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId: number
  }

  export type LikeCreateOrConnectWithoutSayingInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutSayingInput, LikeUncheckedCreateWithoutSayingInput>
  }

  export type LikeCreateManySayingInputEnvelope = {
    data: Enumerable<LikeCreateManySayingInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSayingsInput = {
    update: XOR<UserUpdateWithoutSayingsInput, UserUncheckedUpdateWithoutSayingsInput>
    create: XOR<UserCreateWithoutSayingsInput, UserUncheckedCreateWithoutSayingsInput>
  }

  export type UserUpdateWithoutSayingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    tags?: TagUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutSayingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    likes?: LikeUncheckedUpdateManyWithoutUserInput
  }

  export type AuthorUpsertWithoutSayingsInput = {
    update: XOR<AuthorUpdateWithoutSayingsInput, AuthorUncheckedUpdateWithoutSayingsInput>
    create: XOR<AuthorCreateWithoutSayingsInput, AuthorUncheckedCreateWithoutSayingsInput>
  }

  export type AuthorUpdateWithoutSayingsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorUncheckedUpdateWithoutSayingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpsertWithWhereUniqueWithoutSayingInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutSayingInput, CommentUncheckedUpdateWithoutSayingInput>
    create: XOR<CommentCreateWithoutSayingInput, CommentUncheckedCreateWithoutSayingInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutSayingInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutSayingInput, CommentUncheckedUpdateWithoutSayingInput>
  }

  export type CommentUpdateManyWithWhereWithoutSayingInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type TagUpsertWithWhereUniqueWithoutSayingsInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutSayingsInput, TagUncheckedUpdateWithoutSayingsInput>
    create: XOR<TagCreateWithoutSayingsInput, TagUncheckedCreateWithoutSayingsInput>
  }

  export type TagUpdateWithWhereUniqueWithoutSayingsInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutSayingsInput, TagUncheckedUpdateWithoutSayingsInput>
  }

  export type TagUpdateManyWithWhereWithoutSayingsInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutSayingInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutSayingInput, LikeUncheckedUpdateWithoutSayingInput>
    create: XOR<LikeCreateWithoutSayingInput, LikeUncheckedCreateWithoutSayingInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutSayingInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutSayingInput, LikeUncheckedUpdateWithoutSayingInput>
  }

  export type LikeUpdateManyWithWhereWithoutSayingInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutLikesInput>
  }

  export type SayingCreateWithoutTagsInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutSayingsInput
    author: AuthorCreateNestedOneWithoutSayingsInput
    comments?: CommentCreateNestedManyWithoutSayingInput
    likes?: LikeCreateNestedManyWithoutSayingInput
  }

  export type SayingUncheckedCreateWithoutTagsInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    userId: number
    text: string
    comments?: CommentUncheckedCreateNestedManyWithoutSayingInput
    likes?: LikeUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingCreateOrConnectWithoutTagsInput = {
    where: SayingWhereUniqueInput
    create: XOR<SayingCreateWithoutTagsInput, SayingUncheckedCreateWithoutTagsInput>
  }

  export type UserCreateWithoutTagsInput = {
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentCreateNestedManyWithoutUserInput
    sayings?: SayingCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTagsInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    sayings?: SayingUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTagsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput>
  }

  export type SayingUpsertWithWhereUniqueWithoutTagsInput = {
    where: SayingWhereUniqueInput
    update: XOR<SayingUpdateWithoutTagsInput, SayingUncheckedUpdateWithoutTagsInput>
    create: XOR<SayingCreateWithoutTagsInput, SayingUncheckedCreateWithoutTagsInput>
  }

  export type SayingUpdateWithWhereUniqueWithoutTagsInput = {
    where: SayingWhereUniqueInput
    data: XOR<SayingUpdateWithoutTagsInput, SayingUncheckedUpdateWithoutTagsInput>
  }

  export type SayingUpdateManyWithWhereWithoutTagsInput = {
    where: SayingScalarWhereInput
    data: XOR<SayingUpdateManyMutationInput, SayingUncheckedUpdateManyWithoutSayingsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTagsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTagsInput, UserUncheckedUpdateWithoutTagsInput>
    create: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTagsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTagsInput, UserUncheckedUpdateWithoutTagsInput>
  }

  export type UserUpdateManyWithWhereWithoutTagsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
  }

  export type SayingCreateWithoutLikesInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutSayingsInput
    author: AuthorCreateNestedOneWithoutSayingsInput
    comments?: CommentCreateNestedManyWithoutSayingInput
    tags?: TagCreateNestedManyWithoutSayingsInput
  }

  export type SayingUncheckedCreateWithoutLikesInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    userId: number
    text: string
    comments?: CommentUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingCreateOrConnectWithoutLikesInput = {
    where: SayingWhereUniqueInput
    create: XOR<SayingCreateWithoutLikesInput, SayingUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutLikesInput = {
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentCreateNestedManyWithoutUserInput
    sayings?: SayingCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    sayings?: SayingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type SayingUpsertWithoutLikesInput = {
    update: XOR<SayingUpdateWithoutLikesInput, SayingUncheckedUpdateWithoutLikesInput>
    create: XOR<SayingCreateWithoutLikesInput, SayingUncheckedCreateWithoutLikesInput>
  }

  export type SayingUpdateWithoutLikesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSayingsInput
    author?: AuthorUpdateOneRequiredWithoutSayingsInput
    comments?: CommentUpdateManyWithoutSayingInput
    tags?: TagUpdateManyWithoutSayingsInput
  }

  export type SayingUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutSayingInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutUserInput
    sayings?: SayingUpdateManyWithoutUserInput
    tags?: TagUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    sayings?: SayingUncheckedUpdateManyWithoutUserInput
  }

  export type SayingCreateWithoutCommentsInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    user: UserCreateNestedOneWithoutSayingsInput
    author: AuthorCreateNestedOneWithoutSayingsInput
    tags?: TagCreateNestedManyWithoutSayingsInput
    likes?: LikeCreateNestedManyWithoutSayingInput
  }

  export type SayingUncheckedCreateWithoutCommentsInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    userId: number
    text: string
    likes?: LikeUncheckedCreateNestedManyWithoutSayingInput
  }

  export type SayingCreateOrConnectWithoutCommentsInput = {
    where: SayingWhereUniqueInput
    create: XOR<SayingCreateWithoutCommentsInput, SayingUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    sayings?: SayingCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    name: string
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    bio?: string | null
    avatar?: string | null
    sayings?: SayingUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type SayingUpsertWithoutCommentsInput = {
    update: XOR<SayingUpdateWithoutCommentsInput, SayingUncheckedUpdateWithoutCommentsInput>
    create: XOR<SayingCreateWithoutCommentsInput, SayingUncheckedCreateWithoutCommentsInput>
  }

  export type SayingUpdateWithoutCommentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSayingsInput
    author?: AuthorUpdateOneRequiredWithoutSayingsInput
    tags?: TagUpdateManyWithoutSayingsInput
    likes?: LikeUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    likes?: LikeUncheckedUpdateManyWithoutSayingInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sayings?: SayingUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    tags?: TagUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sayings?: SayingUncheckedUpdateManyWithoutUserInput
    likes?: LikeUncheckedUpdateManyWithoutUserInput
  }

  export type CommentCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    sayingId: number
  }

  export type SayingCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    authorId: number
    text: string
  }

  export type LikeCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    sayingId: number
  }

  export type CommentUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    saying?: SayingUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    sayingId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    sayingId?: IntFieldUpdateOperationsInput | number
  }

  export type SayingUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    author?: AuthorUpdateOneRequiredWithoutSayingsInput
    comments?: CommentUpdateManyWithoutSayingInput
    tags?: TagUpdateManyWithoutSayingsInput
    likes?: LikeUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutSayingInput
    likes?: LikeUncheckedUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateManyWithoutSayingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saying?: SayingUpdateOneRequiredWithoutLikesInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sayingId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUncheckedUpdateManyWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sayingId?: IntFieldUpdateOperationsInput | number
  }

  export type TagUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    sayings?: SayingUpdateManyWithoutTagsInput
  }

  export type TagUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SayingCreateManyAuthorInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId: number
    text: string
  }

  export type SayingUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSayingsInput
    comments?: CommentUpdateManyWithoutSayingInput
    tags?: TagUpdateManyWithoutSayingsInput
    likes?: LikeUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutSayingInput
    likes?: LikeUncheckedUpdateManyWithoutSayingInput
  }

  export type CommentCreateManySayingInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    userId: number
  }

  export type LikeCreateManySayingInput = {
    id?: number
    createdAt?: Date | string
    updateAt?: Date | string
    userId: number
  }

  export type CommentUpdateWithoutSayingInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUncheckedUpdateWithoutSayingInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TagUpdateWithoutSayingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTagsInput
  }

  export type TagUncheckedUpdateWithoutSayingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutSayingInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesInput
  }

  export type LikeUncheckedUpdateWithoutSayingInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SayingUpdateWithoutTagsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSayingsInput
    author?: AuthorUpdateOneRequiredWithoutSayingsInput
    comments?: CommentUpdateManyWithoutSayingInput
    likes?: LikeUpdateManyWithoutSayingInput
  }

  export type SayingUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutSayingInput
    likes?: LikeUncheckedUpdateManyWithoutSayingInput
  }

  export type UserUpdateWithoutTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutUserInput
    sayings?: SayingUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutUserInput
    sayings?: SayingUncheckedUpdateManyWithoutUserInput
    likes?: LikeUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}